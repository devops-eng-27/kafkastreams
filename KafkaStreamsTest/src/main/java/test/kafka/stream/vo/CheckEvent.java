/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test.kafka.stream.vo;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CheckEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CheckEvent\",\"namespace\":\"test.kafka\",\"fields\":[{\"name\":\"Date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Data\",\"type\":{\"type\":\"map\",\"values\":[\"int\",\"long\",\"float\",\"double\",{\"type\":\"string\",\"avro.java.string\":\"String\"},\"boolean\",\"bytes\",{\"type\":\"array\",\"items\":[\"int\",\"long\",\"float\",\"double\",{\"type\":\"string\",\"avro.java.string\":\"String\"},\"boolean\",\"bytes\"]}],\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String Date;
  @Deprecated public java.util.Map<java.lang.String,java.lang.Object> Data;

  public CheckEvent() {}

  public CheckEvent(java.lang.String Date, java.util.Map<java.lang.String,java.lang.Object> Data) {
    this.Date = Date;
    this.Data = Data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Date;
    case 1: return Data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Date = (java.lang.String)value$; break;
    case 1: Data = (java.util.Map<java.lang.String,java.lang.Object>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  public java.lang.String getDate() {
    return Date;
  }

  public void setDate(java.lang.String value) {
    this.Date = value;
  }

  public java.util.Map<java.lang.String,java.lang.Object> getData() {
    return Data;
  }

  public void setData(java.util.Map<java.lang.String,java.lang.Object> value) {
    this.Data = value;
  }

  /** Creates a new CollectGroupEvent RecordBuilder */
  public static test.kafka.stream.vo.CheckEvent.Builder newBuilder() {
    return new test.kafka.stream.vo.CheckEvent.Builder();
  }
  
  /** Creates a new CollectGroupEvent RecordBuilder by copying an existing Builder */
  public static test.kafka.stream.vo.CheckEvent.Builder newBuilder(test.kafka.stream.vo.CheckEvent.Builder other) {
    return new test.kafka.stream.vo.CheckEvent.Builder(other);
  }
  
  /** Creates a new CollectGroupEvent RecordBuilder by copying an existing CollectGroupEvent instance */
  public static test.kafka.stream.vo.CheckEvent.Builder newBuilder(test.kafka.stream.vo.CheckEvent other) {
    return new test.kafka.stream.vo.CheckEvent.Builder(other);
  }
  
  /**
   * RecordBuilder for CollectGroupEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CheckEvent>
    implements org.apache.avro.data.RecordBuilder<CheckEvent> {

    private java.lang.String Date;
    private java.util.Map<java.lang.String,java.lang.Object> Data;

    /** Creates a new Builder */
    private Builder() {
      super(test.kafka.stream.vo.CheckEvent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(test.kafka.stream.vo.CheckEvent.Builder other) {
      super(other);
  
      if (isValidValue(fields()[0], other.Date)) {
        this.Date = data().deepCopy(fields()[0].schema(), other.Date);
        fieldSetFlags()[0] = true;
      }

      if (isValidValue(fields()[1], other.Data)) {
        this.Data = data().deepCopy(fields()[1].schema(), other.Data);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CollectGroupEvent instance */
    private Builder(test.kafka.stream.vo.CheckEvent other) {
            super(test.kafka.stream.vo.CheckEvent.SCHEMA$);
      
      if (isValidValue(fields()[0], other.Date)) {
        this.Date = data().deepCopy(fields()[0].schema(), other.Date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Data)) {
        this.Data = data().deepCopy(fields()[1].schema(), other.Data);
        fieldSetFlags()[1] = true;
      }
    }

  
    /** Gets the value of the 'occDt' field */
    public java.lang.String getDate() {
      return Date;
    }
    
    /** Sets the value of the 'occDt' field */
    public test.kafka.stream.vo.CheckEvent.Builder setDate(java.lang.String value) {
      validate(fields()[0], value);
      this.Date = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    

    /** Gets the value of the 'attributes' field */
    public java.util.Map<java.lang.String,java.lang.Object> getAttributes() {
      return Data;
    }
    
    /** Sets the value of the 'attributes' field */
    public test.kafka.stream.vo.CheckEvent.Builder setAttributes(java.util.Map<java.lang.String,java.lang.Object> value) {
      validate(fields()[1], value);
      this.Data = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    

    public CheckEvent build() {
      try {
        CheckEvent record = new CheckEvent();
        record.Date = fieldSetFlags()[0] ? this.Date : (java.lang.String) defaultValue(fields()[0]);
        record.Data = fieldSetFlags()[1] ? this.Data : (java.util.Map<java.lang.String,java.lang.Object>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
